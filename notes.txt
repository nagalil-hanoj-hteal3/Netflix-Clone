-- required npm libraries --

1. Express: Web framework for server
2. JSONwebtoken: Authentication to create tokens and record Authentication
3. Mongoose: MongoDB to interact with the data we have 
4. Cookie-Parser: To parse incoming cookies under a request
5. Dotenv: To work with environment variables 
6. Axios: HTTP client alternative to request data
7. BCryptJS: To encrypt/hash password

-- JSON --

1. On package.json, inside "scripts", updating it to  "dev": "node backend/server.js"
to run the script, therefore using the command "npm run dev"
2. Utilize the "main" to call the server.js to run the code
3. 

-- server.js --

1. Imports can be used when adding "type": "module"
of package.json (line 11). this will prevent using const and have
organized code when calling libraries.
2. The center of connecting all the code together consisting
of authorization, movies, searching, etc.
3. Includes protectRoute as the middleware to prevent unauthorized users to access
the website.

-- auth.route.js --

1. Keep this to use the routing of the authorization (signup, login, logout)
2. Will be using POST method to modify changes 
3. The GET method is only used for display the changes added

-- user.model.js --

1. Used for the MongoDB to setup the Users table
2. Consists of username, email, password, image, and search history

-- envVars.js --

1. Assign variables called from the .env file to protect API keys as well as
private information (thanks to .gitignore)

-- db.js --

1. Connect the MongoDB from the pasted link used 
2. Ensure everything is running

-- auth.controller.js --

1. Utilize the signup, login, and logout features for account purposes
2. bcryptjs is used for hashing the password on the MongoDB
3. For signup, validate for existing email/username, valid email, as well as 
password length (soon to touch on), and internal errors.
4. For logout, it will clear the cookies created from the signup (via the 
generateToken from jwt and envVars.js) and can be verified from the console log 
as well as the postman to verify that the user is logged out.

-- generateToken.js --

1. Primarily for setting cookies and see the user's cookies of the created account
2. Can be used to set how long a user can have access to the account
3. Beneficial to prevent XSS attacks
4. On postman, you can see the cookies tab per account created

-- tmdb.service.js --

1. Call the API key from The Movie Database website to fetch data
2. This will return the data that is from the website

-- movie.route.js --

1. Capture routes of the movie database website to capture certain elements
that is displayed

-- movieTv.controller.js -- 

1. Retrieve data from the url for both movies and TV sections.
2. Handles the status when utilizing the strategy design pattern for connection
status and determining which category goes to which.

-- movietv.route.js --

1. Same concept, but utilizing type to determine tv show or movie

-- movie.strategy.js / tv.strategy.js --

1. Call the neccessary fetch data from the database to call which strategy or 
concept to be used (i.e. trending, trailers, details, etc.)
2. Used as strategy to collect the neccessary information

-- protectRoute.js --

1. Call the jsonwebtoken, environment variables, and user for detecting
any fraudelent or unnecessary users that access the website.
2. Users must login in order to access the website.

-- search.route.js --

1. Capture ways to search a person, movie, or tv show with query
2. Obtain history of user search history as well as deleting search items

-- search.controller.js --

1. Obtain the queries of each function with person, movie, tv 
2. Backend functionality of using the API necessary for the role

-- .env --

1. Used for the environment setup for PORT and MONGO DB
2. MONGO DB will be used for a link thats added from the account setup
in cloud.mongodb.com
3. Added JWT_Secret for security purposes
4. Set the node environment based on the developer needs
5. Added movie DB api key for reference

-- running the code --

1. It is always important to kill the code ran everytime a change is made
in order to keep it consistent with the updated changes, however, to
prevent this, include "--watch" in between "node" and "server.js", for not
having to keep on killing the terminal to run the newly changes.

-- command tricks --

1. ctrl + d to capture all matching words and override all as one. 
Example: There are three words called "get", keep pressing ctrl + d 
three times and type any letter to override all the matching words.